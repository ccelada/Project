CTGRY_ENTRTNMNT_RVNU, CTGRY_SLTNS_RVNU, CTGRY_UNLLCTD_RVNU, TOT_DLLR_INVC, VC_PRPD_AMNT, SMS_PRPD_AMNT,
VS_PRPD_AMNT, GPRS_PRPD_AMNT, TOT_RVNU, PRPD_QNTTY_RCHRG, PRPD_RCHRG_AMNT, VC_TRFC_ONNT_PD_CLLS,
VC_TRFC_ONNT_PD_MNTS, VC_TRFC_ONNT_ADTNL_CLLS, VC_TRFC_ONNT_ADTNL_MNTS, VC_TRFC_ONNT_ADTNL_RVNU,
VC_TRFC_EXTNT_PD_CLLS, VC_TRFC_EXTNT_PD_MNTS, VC_TRFC_EXTNT_ADTNL_CLLS, VC_TRFC_EXTNT_ADTNL_MNTS,
VC_TRFC_EXTNT_ADTNL_RVNU, VC_TRFC_INTRNTNL_CLLS, VC_TRFC_INTRNTNL_MNTS, VC_TRFC_INTRNTNL_RVNU,
VC_TRFC_RMNG_CLLS, VC_TRFC_RMNG_MNTS, VC_TRFC_RMNG_RVNU, VC_TRFC_FXD_NLD_PD_CLLS,
VC_TRFC_FXD_NLD_PD_MNTS, VC_TRFC_FXD_NLD_ADTNL_CLLS, VC_TRFC_FXD_NLD_ADTNL_MNTS,
VC_TRFC_FXD_NLD_ADTNL_RVNU, VC_TRFC_FXD_LCL_PD_CLLS, VC_TRFC_FXD_LCL_PD_MNTS,
VC_TRFC_FXD_LCL_ADTNL_CLLS, VC_TRFC_FXD_LCL_ADTNL_MNTS, VC_TRFC_FXD_LCL_ADTNL_RVNU,
VC_TRFC_IVR_PD_CLLS, VC_TRFC_IVR_PD_MNTS, VC_TRFC_IVR_ADTNL_CLLS, VC_TRFC_IVR_ADTNL_MNTS,
VC_TRFC_IVR_ADTNL_RVNU, VC_TRFC_OTHRS_PD_CLLS, VC_TRFC_OTHRS_PD_MNTS, VC_TRFC_OTHRS_ADTNL_CLLS,
VC_TRFC_OTHRS_ADTNL_MNTS, VC_TRFC_OTHRS_ADTNL_RVNU, SMS_TRFC_ONNT_PD, SMS_TRFC_ONNT_ADTNL,
SMS_TRFC_ONNT_ADTNL_RVNU, SMS_TRFC_EXTNT_PD, SMS_TRFC_EXTNT_ADTNL, SMS_TRFC_EXTNT_ADTNL_RVNU,
SMS_TRFC_INTRNTNL, SMS_TRFC_INTRNTNL_RVNU, SMS_TRFC_RMNG, SMS_TRFC_RMNG_RVNU, SMS_TRFC_PRMM_PD,
SMS_TRFC_PRMM_ADTNL, SMS_TRFC_PRMM_ADTNL_RVNU, SMS_TRFC_FXD_LCL_PD, SMS_TRFC_FXD_LCL_ADTNL,
SMS_TRFC_FXD_LCL_ADTNL_RVNU, SMS_TRFC_FXD_NLD_PD, SMS_TRFC_FXD_NLD_ADTNL, SMS_TRFC_FXD_NLD_ADTNL_RVNU,
SMS_TRFC_RBT_PD, SMS_TRFC_RBT_ADTNL, SMS_TRFC_RBT_ADTNL_RVNU, SMS_TRFC_FBT_PD, SMS_TRFC_FBT_ADTNL,
SMS_TRFC_FBT_ADTNL_RVNU, SMS_TRFC_OTHRS_PD, SMS_TRFC_OTHRS_ADTNL, SMS_TRFC_OTHRS_ADTNL_RVNU,
MBYTS_UPLNK, MBYTS_DOWNLNK, QNTTY_MBYTS, QNTTY_EVNTS, NVGTN_MNTS, ITX_CLL_LCL_INCMNG,
ITX_CLL_LCL_INCMNG_MNTS, ITX_CLL_LCL_INCMNG_RVNU, ITX_SMS_LCL_INCMNG, ITX_SMS_LCL_INCMNG_RVNU,
ITX_MMS_LCL_INCMNG, ITX_MMS_LCL_INCMNG_RVNU, ITX_CLL_INT_INCMNG, ITX_CLL_INT_INCMNG_MNTS,
ITX_CLL_INT_INCMNG_RVNU, ITX_SMS_INT_INCMNG, ITX_SMS_INT_INCMNG_RVNU, ITX_MMS_INT_INCMNG,
ITX_MMS_INT_INCMNG_RVNU, SBSDY_RNVTN, SBSDY_CLM, SBSDY_UP, SBSDY_PY_RNVTN, SBSDY_PY_CLM,
SBSDY_PY_UP, SBSDY_OTHRS, BS_UN_KEY, BS_UN_CD, BS_UN_NM, PRMTN_CD, PRMTN_NM, RTLR_CHNNL,
QNTTY_INVC_EMTD, SRL_INVC, NMBR_INVC, CRDT_LMT, CSTMR_QNTTY_SSCRBRS, CSTMR_QNTTY_SSCRBRS_INVCNG,
NVGTN_QNTTY_CLSSFCTN, TOT_BSC_PD, CSTMR_ADDRSS, CMNCTN_ARPU, INFMTN_ARPU, ENTRTNMNT_ARPU,
SLTNS_ARPU, INVC_AVRG_3MNTHS, INVC_AVRG_6MNTHS, INVC_AVRG_9MNTHS, INVC_AVRG_12MNTHS,
INVC_QNTTY_3MNTHS, INVC_QNTTY_6MNTHS, INVC_QNTTY_9MNTHS, INVC_QNTTY_12MNTHS, ITX_CLL_LCL_OUTGNG,
ITX_CLL_LCL_OUTGNG_MNTS, ITX_CLL_LCL_OUTGNG_CST, ITX_SMS_LCL_OUTGNG, ITX_SMS_LCL_OUTGNG_CST,
ITX_CLL_INT_OUTGNG, ITX_CLL_INT_OUTGNG_MNTS, ITX_CLL_INT_OUTGNG_CST, ITX_SMS_INT_OUTGNG,
ITX_SMS_INT_OUTGNG_CST, LN_PNDNG_MNTHS
from SMY_AR.PSTPD_STTSTC_FCT
where FCT_CYCL_DT between '01-OCT-2014' and '31-OCT-2014'")
dbDisconnect(con)
View(df)
table(df$AR_ST_CD)
table(df$DVC_CTGRY_NM_BNFT[df$AR_ST_CD == 2])
table(df$AR_ST_NM)
table(df$DVC_CTGRY_NM_BNFT[df$AR_ST_CD %in% c("2",">")])
table(df$DVC_CTGRY_NM_BNFT[df$AR_ST_CD == 2])
load("~/Documents/Analisis/2015 01/Numeracion SIT/Depuracion.RData")
write.csv?
?write.csv
write.csv(Devueltos_Depurados, file="Numeros_Devueltos_Depurados.csv")
install.packages("googleVis", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(googleVis)
library(shiny)
library(RCurl)
library(XML)
library(lubridate)
library(ggplot2)
library(scales)
library(data.table)
library(forecast)
## SOAP request Header Fields
headerFields <- c('Content-Type' = "text/xml; charset=utf-8",
SOAPAction = "http://www.banguat.gob.gt/variables/ws/TipoCambioFechaInicial")
## SOAP request Body
body <- '<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
<soap:Body>
<TipoCambioFechaInicial xmlns="http://www.banguat.gob.gt/variables/ws/">
<fechainit>01/01/2000</fechainit>
</TipoCambioFechaInicial>
</soap:Body>
</soap:Envelope>'
## get data from central bank's website via webservice
reader <- basicTextGatherer()
curlPerform(url="http://www.banguat.gob.gt/variables/ws/TipoCambio.asmx",
httpheader = headerFields,
postfields=body,
writefunction=reader$update)
## Parse returned XML
xmldata <- xmlParse(reader$value(), asText=TRUE)
rootNode <- xmlRoot(xmldata)
## Determine # of records from XML
records <- as.numeric(xmlSApply(rootNode[[1]][[1]][[1]],xmlValue)[2])
## Build dataframe from XML
xrate <- data.frame(
date=rep("",records),
sell=rep(NA,records),
buy=rep(NA,records),
xRate=rep(NA,records),
stringsAsFactors=FALSE)
for(i in 1:records){
xrate[i,1:3] <- xmlSApply(rootNode[[1]][[1]][[1]][[1]][[i]],xmlValue)[-1]
}
## Convert exchange rates to numeric
xrate[,2] <- as.numeric(xrate[,2])
xrate[,3] <- as.numeric(xrate[,3])
## Prior to Dec 2006 central bank reported two exchange rate values (sell & buy)
## Starting Dec 02, 2006 sell & buy values are equal and correspond to the
## officialy reported "reference" exchange rate.
## For all dates, we consider the average between buy & sell values as the "reference" exchange rate
xrate[,4] <- (xrate[,2]+xrate[,3])/2
## Transform dates (imported as text) to actual dates (POSIX values)
xrate$date <- dmy(xrate$date)
xrate$year <- as.factor(year(xrate$date))
## This second date value will allow to plot different years in a single "time" axis
xrate$date2 <- ymd(paste0("2000",substr(as.character(xrate$date),5,10)))
## Create summaries for each variable in the second tab using data.table package
xrate$ym <- paste0(lubridate::year(xrate$date),lubridate::month(xrate$date,label=TRUE, abbr=TRUE))
x.rate <- data.table(xrate)
summary1 <- as.data.frame(x.rate[,mean(xRate),by=ym])
summary2 <- as.data.frame(x.rate[,max(xRate),by=ym])
summary3 <- as.data.frame(x.rate[,min(xRate),by=ym])
summary4 <- as.data.frame(x.rate[,.SD[1, xRate], by=ym])
summary5 <- as.data.frame(x.rate[,.SD[.N, xRate], by=ym])
## Create 5 different time series, one for each variable
for(i in 1:5){
assign(paste0("ts", as.character(i)),ts(get(paste0("summary", as.character(i)))[,2],start=2000,freq=12))
}
## This dataframe is needed to label the summary plot (second tab)
summaryylabs <- data.frame(
var = c("1", "2", "3", "4", "5"),
titles=c("Average Exchange Rate in Month",
"Max Exchange Rate in Month",
"Min Exchange Rate in Month",
"Exchange Rate for First Day of Month",
"Exchange Rate for Last Day of Month")
)
View(x.rate)
View(xrate)
gvisLineChart(data=xrate, xvar="date", yvar="xRate")
FirstLine <- gvisLineChart(data=xrate, xvar="date", yvar="xRate")
plot.gvis(FirstLine)
plot(FirstLine)
FirstLine <- gvisLineChart(data=xrate, xvar="date", yvar="xRate", options=list(selectionMode="multiple"))
plot(FirstLine)
install.packages("tidyr", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(tidyr)
tidyXRate <- spread(xrate, year, xRate)
View(tidyXRate)
xrate[,c("date2", "year", "xRate")]
tidyXRate <- spread(xrate[,c("date2", "year", "xRate")], year, xRate)
View(tidyXRate)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"), options=list(selectionMode="multiple"))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple", hAxis="{format: MMM d"))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple", hAxis="{format: MMM d}"))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple", hAxis="{format: 'MMM d'}"))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple", hAxis="{format: 'MMM d'}",
tooltip="{isHtml: 'TRUE'}"))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple", hAxis="{format: 'MMM d'}", height = 500))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple", hAxis="{format: 'MMM d'}", height = 800))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple", hAxis="{format: 'MMM d'}", height = 800, width = 500))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple", hAxis="{format: 'MMM d'}", height = 800, width = 900))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple", hAxis="{format: 'MMM d'}", height = 800, width = 1000))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple", hAxis="{format: 'MMM d', title> 'Exchange Rate (US$ / GTQ)'}", height = 800, width = 1000))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple", hAxis="{format: 'MMM d', title: 'Exchange Rate (US$ / GTQ)'}", height = 800, width = 1000))
plot(FirstLine)
shiny::runApp('ownCloud/Developing Data Products/Project')
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple",
hAxis="{format: 'MMM d'}",
vAxis="{title: 'Exchange Rate (US$ / GTQ)'}"
height = 800, width = 1000))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple",
hAxis="{format: 'MMM d'}",
vAxis="{title: 'Exchange Rate (US$ / GTQ)'}"
height = 800, width = 1000))
plot(FirstLine)
FirstLine <- gvisLineChart(data=tidyXRate, xvar="date2", yvar=c("2012", "2013", "2014", "2015"),
options=list(selectionMode="multiple",
hAxis="{format: 'MMM d'}",
vAxis="{title: 'Exchange Rate (US$ / GTQ)'}",
height = 800, width = 1000))
plot(FirstLine)
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
TimeSeries <- ts1
plot(TimeSeries, col="blue", xlim=c(2000,2018), ylim=c(7.2,8.4),
ylab=summaryylabs[summaryylabs[,1]=="1",2])
lines(prediction()$mean, col="red")
fit.x.rate <- auto.arima(ts1)
prediction <- forecast.Arima(fit.x.rate,h=24,level=95)
lines(prediction$mean, col="red")
lines(ts(prediction$lower, start=c(year(xrate[records,1]),month(xrate[records,1])+1), freq=12),
col="red", lty=3)
lines(ts(prediction$upper, start=c(year(xrate[records,1]),month(xrate[records,1])+1), freq=12),
col="red", lty=3)
legend(x="topright",c("observed","forecast", "95% conf. interval"), col=c("blue", "red", "red"), lty=c(1,1,3))
SummaryLine <- gvisLineChart(data=ts1)
summary <- as.data.frame(ts1)
View(summary)
rm(summary)
View(summary1)
?ym
summary1$ym
ymd(summary1$ym)
?apply
?mapply
mapply(paste0, summary1$ym, rep("1",len(summary1$ym)))
mapply(paste0, summary1$ym, rep("1",length(summary1$ym)))
ymd(mapply(paste0, summary1$ym, rep("1",length(summary1$ym))))
summary1$ym <- ymd(mapply(paste0, summary1$ym, rep("1",length(summary1$ym))))
SummaryLine <- gvisLineChart(data=summary1, xvar = "ym", yvar = "V1")
plot(SummaryLine)
fit.x.rate
prediction
prediction$mean
?as.zoo
as.zoo(prediction$mean)
?getTime
?time
time(ts1)
as.numeric(ts1)
as.matrix(ts1)
as.vector(ts1)
getTime(ts1)
t(ts1)
ts
ts1
prediction$mean
time(prediction$mean)
?decompose
?decimal_date
lubridate_formats
decimal_date(time(prediction$mean))
time(prediction$mean)
int(time(prediction$mean))
?integral
floor(time(prediction$mean))
prediction$floor - floor(time(prediction$mean))
prediction$mean - floor(time(prediction$mean))
time(prediction$mean) - floor(time(prediction$mean))
(time(prediction$mean) - floor(time(prediction$mean)))*12
(time(prediction$mean) - floor(time(prediction$mean)))*12 +1
((time(prediction$mean) - floor(time(prediction$mean)))*12 +1)/100
((time(prediction$mean) - floor(time(prediction$mean)))*12 +1)/100 + floor(time(prediction$mean))
decimal_date(((time(prediction$mean) - floor(time(prediction$mean)))*12 +1)/100 + floor(time(prediction$mean)))
date_decimal(((time(prediction$mean) - floor(time(prediction$mean)))*12 +1)/100 + floor(time(prediction$mean)))
paste("hola", "tu", ".")
?paste
paste("hola", "tu", sep=".")
mapply(paste, floor(time(prediction$mean)), (time(prediction$mean) - floor(time(prediction$mean)))*12 +1, rep(1,length(prediction$mean)),sep="." )
?ceiling
mapply(paste, floor(time(prediction$mean)), ceiling((time(prediction$mean) - floor(time(prediction$mean)))*12 +1), rep(1,length(prediction$mean)),sep="." )
predDates <- mapply(paste, floor(time(prediction$mean)),
ceiling((time(prediction$mean) - floor(time(prediction$mean)))*12 +1),
rep(1,length(prediction$mean)), sep="." )
predDates <- ymd(predDates)
predDates
View(summary1)
summary1 <- as.data.frame(x.rate[,mean(xRate),by=ym])
names(summary1) <- c("ym","Actuals")
xrate$ym <- paste0(lubridate::year(xrate$date),lubridate::month(xrate$date,label=TRUE, abbr=TRUE))
x.rate <- data.table(xrate)
summary1 <- as.data.frame(x.rate[,mean(xRate),by=ym])
summary1$ym <- ymd(mapply(paste0, summary1$ym, rep("1",length(summary1$ym))))
names(summary1) <- c("ym","Actuals")
summary2 <- as.data.frame(x.rate[,max(xRate),by=ym])
summary2$ym <- ymd(mapply(paste0, summary1$ym, rep("1",length(summary1$ym))))
names(summary2) <- c("ym","Actuals")
summary3 <- as.data.frame(x.rate[,min(xRate),by=ym])
summary3$ym <- ymd(mapply(paste0, summary1$ym, rep("1",length(summary1$ym))))
names(summary3) <- c("ym","Actuals")
summary4 <- as.data.frame(x.rate[,.SD[1, xRate], by=ym])
summary4$ym <- ymd(mapply(paste0, summary1$ym, rep("1",length(summary1$ym))))
names(summary4) <- c("ym","Actuals")
summary5 <- as.data.frame(x.rate[,.SD[.N, xRate], by=ym])
summary5$ym <- ymd(mapply(paste0, summary1$ym, rep("1",length(summary1$ym))))
names(summary5) <- c("ym","Actuals")
xrate$ym <- paste0(lubridate::year(xrate$date),lubridate::month(xrate$date,label=TRUE, abbr=TRUE))
x.rate <- data.table(xrate)
summary1 <- as.data.frame(x.rate[,mean(xRate),by=ym])
summary1$ym <- ymd(mapply(paste0, summary1$ym, rep("1",length(summary1$ym))))
names(summary1) <- c("ym","Actuals")
summary2 <- as.data.frame(x.rate[,max(xRate),by=ym])
summary2$ym <- ymd(mapply(paste0, summary2$ym, rep("1",length(summary1$ym))))
names(summary2) <- c("ym","Actuals")
summary3 <- as.data.frame(x.rate[,min(xRate),by=ym])
summary3$ym <- ymd(mapply(paste0, summary3$ym, rep("1",length(summary1$ym))))
names(summary3) <- c("ym","Actuals")
summary4 <- as.data.frame(x.rate[,.SD[1, xRate], by=ym])
summary4$ym <- ymd(mapply(paste0, summary4$ym, rep("1",length(summary1$ym))))
names(summary4) <- c("ym","Actuals")
summary5 <- as.data.frame(x.rate[,.SD[.N, xRate], by=ym])
summary5$ym <- ymd(mapply(paste0, summary5$ym, rep("1",length(summary1$ym))))
names(summary5) <- c("ym","Actuals")
View(summary1)
View(summary2)
summary1$Forecast <- rep(NA, length(summary1$ym))
xrate$ym <- paste0(lubridate::year(xrate$date),lubridate::month(xrate$date,label=TRUE, abbr=TRUE))
x.rate <- data.table(xrate)
summary1 <- as.data.frame(x.rate[,mean(xRate),by=ym])
summary1$ym <- ymd(mapply(paste0, summary1$ym, rep("1",length(summary1$ym))))
names(summary1) <- c("ym","Actuals")
summary1$Forecast <- rep(NA, length(summary1$ym))
summary2 <- as.data.frame(x.rate[,max(xRate),by=ym])
summary2$ym <- ymd(mapply(paste0, summary2$ym, rep("1",length(summary1$ym))))
names(summary2) <- c("ym","Actuals")
summary2$Forecast <- rep(NA, length(summary2$ym))
summary3 <- as.data.frame(x.rate[,min(xRate),by=ym])
summary3$ym <- ymd(mapply(paste0, summary3$ym, rep("1",length(summary1$ym))))
names(summary3) <- c("ym","Actuals")
summary3$Forecast <- rep(NA, length(summary3$ym))
summary4 <- as.data.frame(x.rate[,.SD[1, xRate], by=ym])
summary4$ym <- ymd(mapply(paste0, summary4$ym, rep("1",length(summary1$ym))))
names(summary4) <- c("ym","Actuals")
summary4$Forecast <- rep(NA, length(summary4$ym))
summary5 <- as.data.frame(x.rate[,.SD[.N, xRate], by=ym])
summary5$ym <- ymd(mapply(paste0, summary5$ym, rep("1",length(summary1$ym))))
names(summary5) <- c("ym","Actuals")
summary5$Forecast <- rep(NA, length(summary5$ym))
View(summary1)
?as.data.frame
?data.frame
predDates <- mapply(paste, floor(time(prediction$mean)),
ceiling((time(prediction$mean) - floor(time(prediction$mean)))*12 +1),
rep(1,length(prediction$mean)), sep="." )
predDates <- ymd(predDates)
predSummary <- data.frame("ym"=predDates, "Actuals"=rep(NA,length(prediction$mean)), "Forecast"=prediction$mean)
Summary <- rbind(summary1,predSummary)
View(Summary)
SummaryLine <- gvisLineChart(data=Summary, xvar = "ym", yvar = c("Actuals","Forecast"))
plot(SummaryLine)
summary1 <- as.data.frame(x.rate[,mean(xRate),by=ym])
summary1$ym <- ymd(mapply(paste0, summary1$ym, rep("1",length(summary1$ym))))
names(summary1) <- c("ym","Actuals")
summary1$Forecast <- rep(NA, length(summary1$ym))
summary1$Max <- rep(NA, length(summary1$ym))
summary1$Min <- rep(NA, length(summary1$ym))
summary2 <- as.data.frame(x.rate[,max(xRate),by=ym])
summary2$ym <- ymd(mapply(paste0, summary2$ym, rep("1",length(summary1$ym))))
names(summary2) <- c("ym","Actuals")
summary2$Forecast <- rep(NA, length(summary2$ym))
summary2$Max <- rep(NA, length(summary2$ym))
summary2$Min <- rep(NA, length(summary2$ym))
summary3 <- as.data.frame(x.rate[,min(xRate),by=ym])
summary3$ym <- ymd(mapply(paste0, summary3$ym, rep("1",length(summary1$ym))))
names(summary3) <- c("ym","Actuals")
summary3$Forecast <- rep(NA, length(summary3$ym))
summary3$Max <- rep(NA, length(summary3$ym))
summary3$Min <- rep(NA, length(summary3$ym))
summary4 <- as.data.frame(x.rate[,.SD[1, xRate], by=ym])
summary4$ym <- ymd(mapply(paste0, summary4$ym, rep("1",length(summary1$ym))))
names(summary4) <- c("ym","Actuals")
summary4$Forecast <- rep(NA, length(summary4$ym))
summary4$Max <- rep(NA, length(summary4$ym))
summary4$Min <- rep(NA, length(summary4$ym))
summary5 <- as.data.frame(x.rate[,.SD[.N, xRate], by=ym])
summary5$ym <- ymd(mapply(paste0, summary5$ym, rep("1",length(summary1$ym))))
names(summary5) <- c("ym","Actuals")
summary5$Forecast <- rep(NA, length(summary5$ym))
summary5$Max <- rep(NA, length(summary5$ym))
summary5$Min <- rep(NA, length(summary5$ym))
predDates <- mapply(paste, floor(time(prediction$mean)),
ceiling((time(prediction$mean) - floor(time(prediction$mean)))*12 +1),
rep(1,length(prediction$mean)), sep="." )
predDates <- ymd(predDates)
predSummary <- data.frame("ym"=predDates,
"Actuals"=rep(NA,length(prediction$mean)),
"Forecast"=prediction$mean
"Max"=prediction$upper,
"Min"=prediction$lower)
Summary <- rbind(summary1,predSummary)
SummaryLine <- gvisLineChart(data=Summary, xvar = "ym", yvar = c("Actuals","Forecast", "Max","Min"))
plot(SummaryLine)
View(Summary)
View(summary1)
View(predSummary)
predSummary <- data.frame("ym"=predDates,
"Actuals"=rep(NA,length(prediction$mean)),
"Forecast"=prediction$mean
"Max"=prediction$upper,
"Min"=prediction$lower)
predSummary <- data.frame("ym"=predDates,
"Actuals"=rep(NA,length(prediction$mean)),
"Forecast"=prediction$mean,
"Max"=prediction$upper,
"Min"=prediction$lower)
Summary <- rbind(summary1,predSummary)
View(Summary)
View(summary1)
View(predSummary)
predSummary <- data.frame("ym"=predDates,
"Actuals"=rep(NA,length(prediction$mean)),
"Forecast"=prediction$mean,
"Max"=prediction$upper,
"Min"=prediction$lower)
View(predSummary)
names(predSummary) <- c("ym", "Actuals", "Forecast", "Max", "Min")
Summary <- rbind(summary1,predSummary)
SummaryLine <- gvisLineChart(data=Summary, xvar = "ym", yvar = c("Actuals","Forecast", "Max","Min"))
plot(SummaryLine)
predDates <- ymd(mapply(paste, floor(time(prediction$mean)),
ceiling((time(prediction$mean) - floor(time(prediction$mean)))*12 +1),
rep(1,length(prediction$mean)), sep="." ))
predDates
predSummary <- data.frame("ym"=predDates,
"Actuals"=rep(NA,length(prediction$mean)),
"Forecast"=prediction$mean,
"Upper"=prediction$upper,
"Lower"=prediction$lower)
View(predSummary)
as.numeric(preduction$upper)
as.numeric(prediction$upper)
predSummary <- data.frame("ym"=predDates,
"Actuals"=rep(NA,length(prediction$mean)),
"Forecast"=prediction$mean,
"Max"=as.numeric(prediction$upper),
"Min"=as.numeric(prediction$lower))
View(predSummary)
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
shiny::runApp('ownCloud/Developing Data Products/Project')
library(gtools)
perm <- permutations(n=8, r=8, v=1:8)
View(perm)
perm[1]
perm[1,]
perm <- as.data.frame(perm)
View(perm)
names(perm) <- c("a", "b", "c", "d", "e", "f", "g", "h")
View(perm)
perm$R1 <- perm$a - perm$b
View(perm)
perm$R1 <- perm$a - perm$b
perm$R2 <- perm$c + perm$d
perm$R3 <- perm$e - perm$f
perm$R4 <- perm$g + perm$h
perm[permR1==1,]
perm[perm$R1==1,]
perm[perm$R1==1 & perm$R2==9 & perm$R3==2 & perm$R4==7,]
perm[perm$R1>0 & perm$R2>0 & perm$R3>0 & perm$R4>0,]
perm[perm$R1==1 & perm$R2==11 & perm$R3==5 & perm$R4==13,]
load("~/Documents/Analisis/2015 02/Freq de Navegacion.RData")
load("~/Documents/Analisis/2015 06/Data Freq Analysis.RData")
mean(Freq_Data$DT_FREQ[which(Freq_Data$DVC_TP_NM=="SMARTPHONE"&Freq_Data$CTGRY_INF_RVNU>0&Freq_Data$DT_TRAFIC_AMNT>0&Freq_Data$MONTH==5)])
median(Freq_Data$DT_FREQ[which(Freq_Data$DVC_TP_NM=="SMARTPHONE"&Freq_Data$CTGRY_INF_RVNU>0&Freq_Data$DT_TRAFIC_AMNT>=0&Freq_Data$MONTH==5)])
mean(Freq_Data_1MB$DT_FREQ[which(Freq_Data_1MB$DVC_TP_NM=="SMARTPHONE"&Freq_Data_1MB$CTGRY_INF_RVNU>0&Freq_Data_1MB$DT_TRAFIC_AMNT>0&Freq_Data_1MB$MONTH==5)])
median(Freq_Data_1MB$DT_FREQ[which(Freq_Data_1MB$DVC_TP_NM=="SMARTPHONE"&Freq_Data_1MB$CTGRY_INF_RVNU>0&Freq_Data_1MB$DT_TRAFIC_AMNT>=0&Freq_Data_1MB$MONTH==5)])
mean(Freq_Data_2MB$DT_FREQ[which(Freq_Data_2MB$DVC_TP_NM=="SMARTPHONE"&Freq_Data_2MB$CTGRY_INF_RVNU>0&Freq_Data_2MB$DT_TRAFIC_AMNT>0&Freq_Data_2MB$MONTH==5)])
median(Freq_Data_2MB$DT_FREQ[which(Freq_Data_2MB$DVC_TP_NM=="SMARTPHONE"&Freq_Data_2MB$CTGRY_INF_RVNU>0&Freq_Data_2MB$DT_TRAFIC_AMNT>=0&Freq_Data_2MB$MONTH==5)])
mean(Freq_Data_5MB$DT_FREQ[which(Freq_Data_5MB$DVC_TP_NM=="SMARTPHONE"&Freq_Data_5MB$CTGRY_INF_RVNU>0&Freq_Data_5MB$DT_TRAFIC_AMNT>0&Freq_Data_5MB$MONTH==5)])
median(Freq_Data_5MB$DT_FREQ[which(Freq_Data_5MB$DVC_TP_NM=="SMARTPHONE"&Freq_Data_5MB$CTGRY_INF_RVNU>0&Freq_Data_5MB$DT_TRAFIC_AMNT>=0&Freq_Data_5MB$MONTH==5)])
par(mfrow=c(2,2))
## Smartphone Data Users, Freq de uso: >0 MB x dia ##
hist(Freq_Data$DT_FREQ[which(Freq_Data$DVC_TP_NM=="SMARTPHONE"&Freq_Data$CTGRY_INF_RVNU>0&Freq_Data$DT_TRAFIC_AMNT>0&Freq_Data$MONTH==5)],
col="blue", main="Frecuencia de Uso de Data
en Smartphones Data Users (>0MB x dia)", xlab = "Dias de uso de Data", ylab = "Subscribers", breaks = 31)
## Smartphone Data Users, Freq de uso: >1 MB x dia ##
hist(Freq_Data_1MB$DT_FREQ[which(Freq_Data_1MB$DVC_TP_NM=="SMARTPHONE"&Freq_Data_1MB$CTGRY_INF_RVNU>0&Freq_Data_1MB$DT_TRAFIC_AMNT>0&Freq_Data_1MB$MONTH==5)],
col="red", main="Frecuencia de Uso de Data
en Smartphones Data Users (>1MB x dia)", xlab = "Dias de uso de Data", ylab = "Subscribers", breaks = 31)
## Smartphone Data Users, Freq de uso: >2 MB x dia ##
hist(Freq_Data_2MB$DT_FREQ[which(Freq_Data_2MB$DVC_TP_NM=="SMARTPHONE"&Freq_Data_2MB$CTGRY_INF_RVNU>0&Freq_Data_2MB$DT_TRAFIC_AMNT>0&Freq_Data_2MB$MONTH==5)],
col="green", main="Frecuencia de Uso de Data
en Smartphones Data Users (>2MB x dia)", xlab = "Dias de uso de Data", ylab = "Subscribers", breaks = 31)
## Smartphone Data Users, Freq de uso: >5 MB x dia ##
hist(Freq_Data_5MB$DT_FREQ[which(Freq_Data_5MB$DVC_TP_NM=="SMARTPHONE"&Freq_Data_5MB$CTGRY_INF_RVNU>0&Freq_Data_5MB$DT_TRAFIC_AMNT>0&Freq_Data_5MB$MONTH==5)],
col="yellow", main="Frecuencia de Uso de Data
en Smartphones Data Users (>5MB x dia)", xlab = "Dias de uso de Data", ylab = "Subscribers", breaks = 31)
data(mtcars)
view(mtcars)
View(mtcars)
plot(mtcars$wt)
plot(mtcars$disp)
par(mfrow(2,1))
?par
par(mfrow=c(2,1))
plot(mtcars$wt)
plot(mtcars$disp)
par(mfrow=c(2,2))
plot(mtcars$wt)
plot(mtcars$disp)
par(mfrow=c(3,1))
plot(mtcars$wt)
plot(mtcars$disp)
shiny::runApp('ownCloud/Developing Data Products/Project')
install.packages(c("caret", "curl", "ggplot2", "git2r", "Hmisc", "jsonlite", "lubridate", "maps", "MASS", "Matrix", "mgcv", "pbkrtest", "plotrix", "qdapRegex", "Rcpp", "RcppArmadillo", "roxygen2", "rstudioapi", "xtable"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
